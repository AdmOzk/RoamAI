@using RoamAI.Models.Entities
@using System.Text.Json
@model Trip

<div class="container">


        <div class="row mt-3">

            <p class="h1 ms-3 mb-3 border-bottom border-success">@Model.Country -  @Model.City</p>

            <div class="col-6 col-sm-5">



                <ul class="list-unstyled fs-5 mt-3">

                    <li class="mt-2"><b>Gidiş Tarihi:</b> @Model.StartDate</li>
                    <li class="mt-2"><b>Dönüş Tarihi:</b> @Model.EndDate</li>
                    <li class="mt-2"><b>Kalınacak Gün Sayısı:</b> @Model.DayCountToStay</li>
                    <li class="mt-2"><b>Gezi İçeriği:</b>%@Model.CulturalPercentage Kültürel, %@Model.EntertainmantPercentage Eğlence, %@Model.FoodPercentage Gastrolojik</li>
                    <li class="mt-2"><b>Şehir Açıklaması:</b> @Model.Description</li>
                    

                </ul>

                <div class="mb-3 mt-3">

                    <h5>Lokasyonlar</h5>
                    @foreach (var Location in Model.Locations)
                    {
                        <div class="mt-2 p-2 border-success border rounded">

                            <h5 class="border-bottom">@Location.LocationName</h5>

                            <p>@Location.Coordinates</p>




                        </div>

                    }
                </div>

                

            </div>


        <h2>Location Map</h2>

        <button id="createMultiStopRoute" class="btn btn-primary mt-3">Çoklu Duraklı Rota Oluştur</button>
        <button id="resetLocations" class="btn btn-secondary mt-3">Seçimleri Sıfırla</button>

        <div id="map"></div>


        </div>
    

</div>




<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB0w9MsYHLJdx_Wd-LOpP8ZgHGsy5mQXh4&callback=initMap" async defer></script>


<script>
    let selectedLocations = []; // Array to store selected locations

    function initMap() {
        // Map initialization options
        const mapOptions = {
            zoom: 10,
            center: { lat: 39.925533, lng: 32.866287 } // Default center location (Ankara, Turkey)
        };

        const map = new google.maps.Map(document.getElementById("map"), mapOptions);

        // Directly get locations from the Model, converted into JavaScript format
        const locations = @Html.Raw(JsonSerializer.Serialize(Model.Locations.Select(loc => new { loc.LocationName, loc.Coordinates })));

        // Add markers for each location on the map
        locations.forEach(location => {
            const name = location.LocationName;
            const coordString = location.Coordinates;
            const coords = parseCoordinates(coordString);

            if (coords) {
                const marker = new google.maps.Marker({
                    position: coords,
                    map: map,
                    title: name
                });

                // Information window for each marker
                const infoContent = `<b>${name}</b><br>
                            <button onclick="addLocation(${coords.lat}, ${coords.lng}, '${name}')">Bu konumu rota duraklarına ekle</button><br>
                            <a href="https://www.google.com/maps/dir/?api=1&destination=${coords.lat},${coords.lng}" target="_blank">Tek Rota Oluştur</a>`;
                const infoWindow = new google.maps.InfoWindow({ content: infoContent });

                // Open info window on marker click
                marker.addListener("click", () => infoWindow.open(map, marker));
            } else {
                console.warn(`Coordinates could not be parsed for location: ${name}`);
            }
        });
    }

    // Function to parse coordinates from the provided string format
    function parseCoordinates(coordinateString) {
        const regex = /([-+]?\d*\.\d+|\d+)[°]\s*([NS]),\s*([-+]?\d*\.\d+|\d+)[°]\s*([EW])/;
        const match = coordinateString.match(regex);

        if (!match) {
            console.warn(`Coordinate string did not match expected format: ${coordinateString}`);
            return null;
        }

        let lat = parseFloat(match[1]);
        let lng = parseFloat(match[3]);

        if (match[2] === "S") lat = -lat;
        if (match[4] === "W") lng = -lng;

        return { lat, lng };
    }

    // Add location to the route
    window.addLocation = function (lat, lng, key) {
        selectedLocations.push({ lat, lng, name: key });
        Swal.fire({
            icon: 'success',
            title: 'Durak Eklendi',
            text: `${key} rota duraklarına eklendi!`,
            timer: 1500,
            showConfirmButton: false
        });
    };

    // Create a multi-stop route using Google Maps Directions
    $('#createMultiStopRoute').on('click', function () {
        if (selectedLocations.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: 'Uyarı',
                text: 'Rota oluşturmak için en az bir konum seçin!',
            });
            return;
        }

        // Construct the Google Maps Directions URL
        let routeUrl = "https://www.google.com/maps/dir/?api=1";
        routeUrl += `&origin=${selectedLocations[0].lat},${selectedLocations[0].lng}`;
        routeUrl += `&destination=${selectedLocations[selectedLocations.length - 1].lat},${selectedLocations[selectedLocations.length - 1].lng}`;

        // Add waypoints if there are more than 2 selected locations
        if (selectedLocations.length > 2) {
            const waypoints = selectedLocations.slice(1, -1).map(loc => `${loc.lat},${loc.lng}`).join('|');
            routeUrl += `&waypoints=${waypoints}`;
        }

        // Open the directions in a new tab
        window.open(routeUrl, '_blank');
        selectedLocations = []; // Clear selected stops

        Swal.fire({
            icon: 'info',
            title: 'Duraklar Sıfırlandı',
            text: 'Seçili duraklar sıfırlandı. Yeni durakları seçebilirsiniz.',
            timer: 1500,
            showConfirmButton: false
        });
    });

    // Reset the selected locations
    $('#resetLocations').on('click', function () {
        selectedLocations = [];
        Swal.fire({
            icon: 'info',
            title: 'Seçimler Sıfırlandı',
            text: 'Tüm seçimler sıfırlandı.',
            timer: 1500,
            showConfirmButton: false
        });
    });
</script>

<style>
    #map {
        height: 600px;
        width: 100%;
        margin-top: 20px;
    }
</style>

