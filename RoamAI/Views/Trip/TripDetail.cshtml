@using RoamAI.Models.Entities
@using System.Text.Json
@model Trip

<div class="container" style="margin: 100px auto; max-width: 75%; background-color: rgba(255, 255, 255, 0.8); padding: 20px; border-radius: 10px;">

        <div class="row mt-3  text-center">

            <p class="h1 ms-3 mb-3 border-bottom border-success">@Model.Country -  @Model.City</p>
            <div class="col-md-3 mb-3" style="width: 20%;">
                <div class="card text-center" style="background-color: rgba(255, 255, 255, 0.9); ">
                    <div class="card-header"><b>Gidiş Tarihi</b></div>
                    <div class="card-body" style="height:40px; padding:5px;">
                        <p>@Model.StartDate.ToString("dd-MM-yyyy")</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3" style="width: 20%;">
                <div class="card text-center" style="background-color: rgba(255, 255, 255, 0.9);">
                    <div class="card-header"><b>Dönüş Tarihi</b></div>
                    <div class="card-body" style="height:40px; padding:5px;">
                        <p>@Model.EndDate.ToString("dd-MM-yyyy")</p>
                    </div>
                </div>
            </div>

            <div class="col-md-3 mb-3" style="width: 20%;">
                <div class="card text-center" style="background-color: rgba(255, 255, 255, 0.9);">
                    <div class="card-header"><b>Kalınacak Gün Sayısı</b></div>
                    <div class="card-body" style="height:40px; padding:5px;">
                        <p>@Model.DayCountToStay Gün</p>
                    </div>
                </div>
            </div>

            <div class="col-md-3 mb-3" style="width: 40%;">
                <div class="card text-center" style="background-color: rgba(255, 255, 255, 0.9);">
                    <div class="card-header"><b>Gezi İçeriği</b></div>
                    <div class="card-body" style="height:40px; padding:5px;">
                        <p>%@Model.CulturalPercentage Kültürel, %@Model.EntertainmantPercentage Eğlence, %@Model.FoodPercentage Gastrolojik</p>
                    </div>
                </div>
            </div>

            <div class="col-12 mb-4">
                <div class="card text-center" style="background-color: rgba(255, 255, 255, 0.9);">
                    <div class="card-header"><h4 style="margin:10px;">Şehir Açıklaması</h4></div>
                    <div class="card-body">
                        <p style="font-size: 23px;">@Model.Description</p>

                    </div>
                </div>
            </div>
            <div class="col-12">
                <div class="card mb-4" style="background-color: rgba(255, 255, 255, 0.9);">
                    <div class="card-body">
                        <h4 class="text-center border-bottom"><strong>Lokasyonlar</strong></h4>

                        <div class="row">    
                                @foreach (var location in Model.Locations)
                                {
                                    <div class="col-md-6 mt-2">
                                        <div class="p-2 border-success border rounded text-center">
                                            <h5 class="border-bottom">@location.LocationName</h5>
                                            <p>@location.Coordinates</p>
                                        </div>
                                    </div>
                                }                           
                        </div>
                    </div>
                </div>
            </div> 
           
            <div class="col-12" style="margin-top:30px;">
                <div class="card mb-4" style="background-color: rgba(255, 255, 255, 0.9);">
                    <div class="card-header">
                        <h2 class="text-center card-title">
                            Location Map
                        </h2>
                    </div>

                    <div class="card-body">

                        <div id="map" style="border-radius: 8px;"></div>

                        <div class="d-flex justify-content-center mt-3">
                            <button id="createMultiStopRoute" class="btn btn-outline-primary mx-2">Çoklu Duraklı Rota Oluştur</button>
                            <button id="resetLocations" class="btn btn-outline-secondary mx-2">Seçimleri Sıfırla</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
</div>




<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=x&callback=initMap" async defer></script>


<script>
    let selectedLocations = []; // Array to store selected locations

    function initMap() {
        // Fetch the location data as a plain string
        $.get(`/Trip/GetLocations?tripId=@ViewBag.TripId`, function (data) {
            const locations = data.split(";");

            if (locations.length > 0) {
                // Get the first location's coordinates
                const firstLocationStr = locations[0];
                const [, firstCoordString] = firstLocationStr.split("|");
                const firstCoords = parseCoordinates(firstCoordString);

                // Initialize the map with the first location's coordinates as center
                const mapOptions = {
                    zoom: 10,
                    center: firstCoords ? firstCoords : { lat: 39.925533, lng: 32.866287 } // Default to Ankara if parsing fails
                };

                const map = new google.maps.Map(document.getElementById("map"), mapOptions);

                // Loop through locations to add markers
                locations.forEach(locationStr => {
                    const [name, coordString] = locationStr.split("|");
                    const coords = parseCoordinates(coordString);

                    if (coords) {
                        const marker = new google.maps.Marker({
                            position: coords,
                            map: map,
                            title: name
                        });

                        // Info window with button to add location
                        const infoContent = `<b>${name}</b><br>
                                    <button onclick="addLocation(${coords.lat}, ${coords.lng}, '${name}')">Bu konumu rota duraklarına ekle</button><br>
                                    <a href="https://www.google.com/maps/dir/?api=1&destination=${coords.lat},${coords.lng}" target="_blank">Tek Rota Oluştur</a>`;

                        const infoWindow = new google.maps.InfoWindow({ content: infoContent });

                        marker.addListener("click", () => infoWindow.open(map, marker));
                    }
                });
            }
        });
    }

    function parseCoordinates(coordinateString) {
        const regex = /([-+]?\d*\.\d+|\d+)[°]\s*([NS]),\s*([-+]?\d*\.\d+|\d+)[°]\s*([EW])/;
        const match = coordinateString.match(regex);

        if (!match) return null;

        let lat = parseFloat(match[1]);
        let lng = parseFloat(match[3]);

        if (match[2] === "S") lat = -lat;
        if (match[4] === "W") lng = -lng;

        return { lat, lng };
    }

    // Add location to the route
    window.addLocation = function (lat, lng, key) {
        selectedLocations.push({ lat, lng, name: key });
        Swal.fire({
            icon: 'success',
            title: 'Durak Eklendi',
            text: `${key} rota duraklarına eklendi!`,
            timer: 1500,
            showConfirmButton: false
        });
    };

    // Create multi-stop route
    $('#createMultiStopRoute').on('click', function () {
        if (selectedLocations.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: 'Uyarı',
                text: 'Rota oluşturmak için en az bir konum seçin!',
            });
            return;
        }

        let routeUrl = "https://www.google.com/maps/dir/?api=1";
        routeUrl += `&origin=${selectedLocations[0].lat},${selectedLocations[0].lng}`;
        routeUrl += `&destination=${selectedLocations[selectedLocations.length - 1].lat},${selectedLocations[selectedLocations.length - 1].lng}`;

        if (selectedLocations.length > 2) {
            const waypoints = selectedLocations.slice(1, -1).map(loc => `${loc.lat},${loc.lng}`).join('|');
            routeUrl += `&waypoints=${waypoints}`;
        }

        window.open(routeUrl, '_blank');
        selectedLocations = []; // Clear selected stops

        Swal.fire({
            icon: 'info',
            title: 'Duraklar Sıfırlandı',
            text: 'Seçili duraklar sıfırlandı. Yeni durakları seçebilirsiniz.',
            timer: 1500,
            showConfirmButton: false
        });
    });

    // Reset selected locations
    $('#resetLocations').on('click', function () {
        selectedLocations = [];
        Swal.fire({
            icon: 'info',
            title: 'Seçimler Sıfırlandı',
            text: 'Tüm seçimler sıfırlandı.',
            timer: 1500,
            showConfirmButton: false
        });
    });
</script>

<style>
    body {
        background-image: url('/images/travel7.png');
        background-size: cover;
        background-attachment: fixed;
    }

    #map {
        height: 600px;
        width: 100%;
        margin-top: 20px;
    }

    .card {
        background-color: rgba(255, 255, 255, 0.8);
    }
</style>

