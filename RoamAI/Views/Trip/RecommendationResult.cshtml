@using RoamAI.Models.Entities
@model Trip

<div class="container">

   
    <h2 class="text-primary">Seyahat Planı: @Model.City, @Model.Country</h2>
    <p>Bu seyahat planı başarıyla kaydedildi. <strong>Plan ID:</strong> @ViewBag.TripId</p>

    <a class="btn btn-sm btn-success" asp-controller="Trip" asp-action="confirm" asp-route-id="@Model.Id">Onayla</a>
    <a class="btn btn-sm btn-danger" asp-controller="Trip" asp-action="createTrip" asp-route-id="@Model.Id" onclick="return confirm('Yeni Seyahat Oluşturmak istediğinize emin misiniz?')">Yeni Seyahat Oluştur</a>

    <h4 class="mt-4">Gezilecek Yerler</h4>
    <div class="row">
        @foreach (var location in Model.Locations)
        {
            <div class="col-md-4">
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">@location.LocationName</h5>
                        <p class="card-text"><strong>Koordinatlar:</strong> @location.Coordinates</p>
                    </div>
                </div>
            </div>
        }
    </div>

    <h4 class="mt-4">Şehir Bilgisi</h4>
    <p>@Model.Description</p>

    <h2>Location Map</h2>
    <div id="map"></div>


    <!-- Buttons for creating and resetting routes -->
    <button id="createMultiStopRoute" class="btn btn-primary mt-3">Çoklu Duraklı Rota Oluştur</button>
    <button id="resetLocations" class="btn btn-secondary mt-3">Seçimleri Sıfırla</button>

</div>

<!-- Include SweetAlert2 for notifications -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Google Maps API script without the marker library -->
<script src="https://maps.googleapis.com/maps/api/js?key=apikEY&callback=initMap" async defer></script>

<script>
    let selectedLocations = []; // Array to store selected locations

    function initMap() {
        const mapOptions = {
            zoom: 10,
            center: { lat: 39.925533, lng: 32.866287 } // Default location (e.g., Ankara, Turkey)
        };

        const map = new google.maps.Map(document.getElementById("map"), mapOptions);

        // Fetch the location data as a plain string
        $.get(`/Trip/GetLocations?tripId=@ViewBag.TripId`, function (data) {
            const locations = data.split(";");

            locations.forEach(locationStr => {
                const [name, coordString] = locationStr.split("|");
                const coords = parseCoordinates(coordString);

                if (coords) {
                    const marker = new google.maps.Marker({
                        position: coords,
                        map: map,
                        title: name
                    });

                    // Info window with button to add location
                    const infoContent = `<b>${name}</b><br>
                            <button onclick="addLocation(${coords.lat}, ${coords.lng}, '${name}')">Bu konumu rota duraklarına ekle</button><br>
                            <a href="https://www.google.com/maps/dir/?api=1&destination=${coords.lat},${coords.lng}" target="_blank">Tek Rota Oluştur</a>`;

                    const infoWindow = new google.maps.InfoWindow({ content: infoContent });

                    marker.addListener("click", () => infoWindow.open(map, marker));
                }
            });
        });
    }

    function parseCoordinates(coordinateString) {
        const regex = /([-+]?\d*\.\d+|\d+)[°]\s*([NS]),\s*([-+]?\d*\.\d+|\d+)[°]\s*([EW])/;
        const match = coordinateString.match(regex);

        if (!match) return null;

        let lat = parseFloat(match[1]);
        let lng = parseFloat(match[3]);

        if (match[2] === "S") lat = -lat;
        if (match[4] === "W") lng = -lng;

        return { lat, lng };
    }

    // Add location to the route
    window.addLocation = function (lat, lng, key) {
        selectedLocations.push({ lat, lng, name: key });
        Swal.fire({
            icon: 'success',
            title: 'Durak Eklendi',
            text: `${key} rota duraklarına eklendi!`,
            timer: 1500,
            showConfirmButton: false
        });
    };

    // Create multi-stop route
    $('#createMultiStopRoute').on('click', function () {
        if (selectedLocations.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: 'Uyarı',
                text: 'Rota oluşturmak için en az bir konum seçin!',
            });
            return;
        }

        let routeUrl = "https://www.google.com/maps/dir/?api=1";
        routeUrl += `&origin=${selectedLocations[0].lat},${selectedLocations[0].lng}`;
        routeUrl += `&destination=${selectedLocations[selectedLocations.length - 1].lat},${selectedLocations[selectedLocations.length - 1].lng}`;

        if (selectedLocations.length > 2) {
            const waypoints = selectedLocations.slice(1, -1).map(loc => `${loc.lat},${loc.lng}`).join('|');
            routeUrl += `&waypoints=${waypoints}`;
        }

        window.open(routeUrl, '_blank');
        selectedLocations = []; // Clear selected stops

        Swal.fire({
            icon: 'info',
            title: 'Duraklar Sıfırlandı',
            text: 'Seçili duraklar sıfırlandı. Yeni durakları seçebilirsiniz.',
            timer: 1500,
            showConfirmButton: false
        });
    });

    // Reset selected locations
    $('#resetLocations').on('click', function () {
        selectedLocations = [];
        Swal.fire({
            icon: 'info',
            title: 'Seçimler Sıfırlandı',
            text: 'Tüm seçimler sıfırlandı.',
            timer: 1500,
            showConfirmButton: false
        });
    });
</script>

<style>
    .container {
        max-width: 900px;
        margin-top: 30px;
    }

    .card {
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        transition: 0.3s;
    }

        .card:hover {
            box-shadow: 0 8px 16px rgba(0,0,0,0.3);
        }

    #map {
        height: 600px;
        width: 100%;
        margin-top: 20px;
    }
</style>