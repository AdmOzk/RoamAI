@using RoamAI.Models.Entities
@model Trip

<style>
    body {
        background-image: url('/images/travel6.png');
        background-size: cover;
        background-position: center;
        font-family: Arial, sans-serif;
        color: #333;
        margin: 0;
        padding: 0;
        display: flex;
        align-items: flex-start;
        justify-content: center;
        min-height: 100vh;
    }

    .choices__placeholder {
        font-size: 1.2em; 
        color: #333; 
        font-weight: bold; 
    }


    .travel-plan-card {
        background-color: rgba(255, 255, 255, 0.9);
        border-radius: 15px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        padding: 20px;
        width: 700px;
        text-align: center;
        margin-top: 100px;
        margin-bottom:100px;
    }

    .form-group label{
        text-align: left;

    }
    .slider-group {
        display: flex;
        align-items: center;
        justify-content: center; 
        width: 80%; 
        margin: 0 auto 15px auto; 
    }

        .slider-group label {
            font-weight: bold;
            flex-basis: 40%; 
            text-align: left; 
            margin-right: 15px;
            
        }

        .slider-group input[type="range"] {
            flex: 1;
            height: 15px;
            background: #ddd;
            outline: none;
            opacity: 0.9;
            transition: opacity .2s;
            border-radius: 4px;
        }

        .slider-group .slider-value {
            width: 75px; 
            text-align: right;
            margin-left: 10px; 
        }

    #submitBtn {
        background-color: #007bff;
        color: white;
        border: 2px solid #007bff;
        cursor: pointer;
        transition: background-color 0.3s ease, border 0.3s ease;
        margin: 0 auto;
        width: 50%;
        padding: 15px;
        font-size: 1.1rem;
        display: block;
        border-radius: 8px;
        margin-top: 30px;
    }

    #submitBtn:hover {
        background-color: #0056b3;
        border-color: #0056b3;
    }

    .card-header {
        background-color: rgba(0, 0, 0, 0.1);
        padding: 10px 0;
        margin-bottom: 20px;
        border-radius: 8px;
        font-weight: bold;
        width: 100%;
    }
    
    .travel-plan-card h2 {
        margin: 10px;
    }
    #city,#country{
        width:300px;
    }
    .form-group{
        margin:10px;
    }

    .flatpickr-input {
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ddd;
        width: 100%;
        box-sizing: border-box;
    }

</style>


@if (ViewBag.HasActiveTrip != null && ViewBag.HasActiveTrip == true)
{
    <!-- Aktif gezi varsa yalnızca uyarı mesajı görüntüleyin -->
    <div class="travel-plan-card">
        <h2>Mevcut Seyahatiniz Var</h2>
        <p>Yeni bir seyahat planı oluşturmadan önce mevcut seyahatinizi bitirmeniz gerekiyor.</p>
        <a class="btn btn-primary" href="@Url.Action("CurrentTrip", "Trip")">Mevcut Seyahati Görüntüle</a>
    </div>
}

else {

    <partial name="_LoadingMessage" />
<div class="travel-plan-card">
    <div class="card-header">
        <h2>Seyahat Planı Oluştur</h2>
    </div>
    <form method="post" asp-action="GetRecommendations" asp-controller="Trip">
        <div class="form-group row mb-3">
            <label class="col-sm-4 col-form-label" style="margin-top:5px;">Ülke:</label>
            <div class="col-sm-6">
                <select id="country" name="CountryId" class="choices" required>
                    <option value="">Select Country</option>
                </select>
                <input type="hidden" id="countryName" name="Country" /> <!-- Hidden input for country name -->
            </div>
        </div>
        <div class="form-group row mb-3">
            <label class="col-sm-4 col-form-label" style="margin-top:5px;">Şehir:</label>
            <div class="col-sm-6">
                <select id="city" name="City" asp-for="City" required>
                    <option value="">Select City</option>
                </select>
            </div>
        </div>
        <div class="form-group row mb-3">
            <label class="col-sm-4 col-form-label" style="margin-top:5px;">Gidiş Tarihi: </label>
            <div class="col-sm-6">
                <input type="date" name="StartDate" asp-for="StartDate" required />
            </div>
        </div>
        <div class="form-group row mb-3">
            <label class="col-sm-4 col-form-label" style="margin-top:5px;">Dönüş Tarihi: </label>
            <div class="col-sm-6">
                <input type="date" name="EndDate" asp-for="EndDate" required />
            </div>
        </div>
        <div class="form-group row mb-3 slider-group" style="margin-top:25px;">
            <label>Kültürel Gezi:</label>
            <input type="range" name="CulturalPercentage" asp-for="CulturalPercentage" min="0" max="100" value="40" step="10" oninput="document.getElementById('culturalValue').textContent = this.value + '%'">
            <span id="culturalValue" class="slider-value">40%</span>
        </div>

        <div class="form-group row mb-3 slider-group">
            <label>Modern Gezi:</label>
            <input type="range" name="EntertainmantPercentage" asp-for="EntertainmantPercentage" min="0" max="100" value="30" step="10" oninput="document.getElementById('entertainmentValue').textContent = this.value + '%'">
            <span id="entertainmentValue" class="slider-value">30%</span>
        </div>

        <div class="form-group row mb-3 slider-group">
            <label>Yemek Üzerine Gezi:</label>
            <input type="range" name="FoodPercentage" asp-for="FoodPercentage" min="0" max="100" value="30" step="10" oninput="document.getElementById('foodValue').textContent = this.value + '%'">
            <span id="foodValue" class="slider-value">30%</span>
        </div>
        
        <button type="submit" id="submitBtn">Plan Oluştur</button>
    </form>

    @if (Model != null && Model.Locations != null && Model.Locations.Any())
    {
        <h3>Gezilecek Yerler</h3>
        <ul>
            @foreach (var recommendation in Model.Locations)
            {
                <li>@recommendation.LocationName</li>
            }
        </ul>

        <h3>@Model.City hakkında Bilgiler</h3>
        <p>@Model.Description</p> <!-- Şehir hakkında bilgiyi burada gösteriyoruz. -->


        <h3>Harita</h3>
        <div id="map" style="height: 500px; width: 100%;"></div> <!-- Harita burada oluşturulacak -->
        <button id="createMultiStopRoute" style="margin-top: 20px;">Seçili Duraklarla Rota Oluştur</button>
        <button id="resetLocations" style="margin-top: 20px; margin-left: 10px;">Seçimleri Sıfırla</button>

    }
</div>



<div id="recommendations" style="display:none;">
    <h3>Gezilecek Yerler</h3>
    <ul id="locationList"></ul>
    <h3>Şehir Bilgisi</h3>
    <p id="cityInfo"></p>
    <h3>Harita</h3>
    <div id="map" style="height: 500px; width: 100%;"></div>
    <p>Bu seyahat planı başarıyla kaydedildi. <strong>Trip ID:</strong> <span id="tripId"></span></p>
</div>

}
<!-- Choices.js CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<!-- jQuery CDN -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Choices.js JS -->
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>





<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Choices.js JS -->
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>

<!-- Google Maps API Key ile Script -->

<script src="https://maps.googleapis.com/maps/api/js?key=KEYBURAYA"></script>

<script>
    $(document).ready(function () {
        $('#travelForm').submit(function (e) {
            e.preventDefault();

            // Form verilerini alın
            var formData = $(this).serialize();

            // AJAX ile GetRecommendations metoduna istekte bulunun
            $.ajax({
                url: '@Url.Action("GetRecommendations", "Trip")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    // Öneri alanlarını doldurun
                    $('#recommendations').show();
                    $('#locationList').empty();
                    $('#cityInfo').text(response.cityInfo);
                    $('#tripId').text(response.tripId); // Trip ID'yi göster

                    response.locations.forEach(location => {
                        $('#locationList').append(`<li>${location.LocationName} (${location.Coordinates})</li>`);
                    });

                    // Haritayı güncelleyin
                    initializeMap(response.locations);
                },
                error: function (xhr, status, error) {
                    alert('Bir hata oluştu: ' + error);
                }
            });
        });

        // Harita başlatma fonksiyonu
        function initializeMap(locations) {
            if (locations.length > 0) {
                var firstLocation = locations[0];
                var firstCoords = firstLocation.Coordinates.split(',');
                var map = new google.maps.Map(document.getElementById("map"), {
                    center: { lat: parseFloat(firstCoords[0]), lng: parseFloat(firstCoords[1]) },
                    zoom: 12
                });

                locations.forEach(location => {
                    var coords = location.Coordinates.split(',');
                    var marker = new google.maps.Marker({
                        position: { lat: parseFloat(coords[0]), lng: parseFloat(coords[1]) },
                        map: map,
                        title: location.LocationName
                    });
                });
            }
        }
    });
</script>


<script>
    $(document).ready(function () {
        // Initialize Choices.js for country selection
        const countrySelect = new Choices('#country', {
            searchEnabled: true,
            placeholderValue: 'Ülke Seçiniz',
            searchPlaceholderValue: 'Aramak için yazın...'
        });

        const citySelect = new Choices('#city', {
            searchEnabled: true,
            placeholderValue: 'Şehir Seçiniz',
            searchPlaceholderValue: 'Şehir aramak için yazın...'
        });

        let citiesData = [];
        // Load countries and populate the dropdown
        $.getJSON('/data/countries.json', function (data) {
            countrySelect.setChoices(data.map(country => ({
                value: country.countryId,
                label: country.name
            })), 'value', 'label', true);
        }).fail(function () {
            console.error('Failed to load countries.json');
        });

        // Load cities data
        $.getJSON('/data/cities.json', function (data) {
            citiesData = data;
        }).fail(function () {
            console.error('Failed to load cities.json');
        });

        // When country changes, filter cities by countryId
        $('#country').change(function () {
            var selectedCountryId = $(this).val();
            var selectedCountryName = $(this).find('option:selected').text();
            $('#countryName').val(selectedCountryName); // Update hidden input for country name

            if (selectedCountryId) {
                // Filter cities based on selected country
                var filteredCities = citiesData.filter(city => city.countryId === selectedCountryId);

                // Update city dropdown with filtered cities using Choices.js
                citySelect.clearChoices();
                citySelect.setChoices(filteredCities.map(city => ({
                    value: city.name,
                    label: city.name
                })), 'value', 'label', true);
            } else {
                citySelect.clearChoices(); 
                citySelect.setChoices([{ value: '', label: 'Şehir Seçiniz' }]);
            }
        });

        // Ensure percentages sum to 100%
        $('#submitBtn').click(function (e) {
            var cultural = parseInt($('input[name="CulturalPercentage"]').val(), 10) || 0;
            var modern = parseInt($('input[name="EntertainmantPercentage"]').val(), 10) || 0;
            var food = parseInt($('input[name="FoodPercentage"]').val(), 10) || 0;
            var total = cultural + modern + food;

            if (total !== 100) {
                e.preventDefault();
                alert('Gezi türü yüzdelerinin toplamı 100 olmalıdır!');
            }
        });
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () { 
        const culturalInput = document.querySelector('input[name="CulturalPercentage"]');
        const entertainmentInput = document.querySelector('input[name="EntertainmantPercentage"]');
        const foodInput = document.querySelector('input[name="FoodPercentage"]');

        [culturalInput, entertainmentInput, foodInput].forEach(input => {
            input.addEventListener('input', () => {
                enforceMaxTotal();
            });
        });

        function enforceMaxTotal() {
            const culturalValue = parseInt(culturalInput.value) || 0;
            const entertainmentValue = parseInt(entertainmentInput.value) || 0;
            const foodValue = parseInt(foodInput.value) || 0;
            const total = culturalValue + entertainmentValue + foodValue;

            if (total > 100) {
                const excess = total - 100;

                if (document.activeElement === culturalInput) {
                    culturalInput.value = culturalValue - excess;
                    document.getElementById('culturalValue').textContent = `${culturalInput.value}%`;
                } else if (document.activeElement === entertainmentInput) {
                    entertainmentInput.value = entertainmentValue - excess;
                    document.getElementById('entertainmentValue').textContent = `${entertainmentInput.value}%`;
                } else if (document.activeElement === foodInput) {
                    foodInput.value = foodValue - excess;
                    document.getElementById('foodValue').textContent = `${foodInput.value}%`;
                }
            }
        }
    });

</script>
<script>
    $(document).ready(function () {
        flatpickr('input[name="StartDate"]', {
            altInput: true,
            altFormat: "d.m.Y", 
            dateFormat: "Y-m-d",
            minDate: "today",
            allowInput: true,
            locale: {
                firstDayOfWeek: 1,
                weekdays: {
                    shorthand: ['Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt', 'Paz'],
                    longhand: ['Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi', 'Pazar']
                },
                months: {
                    shorthand: ['Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara'],
                    longhand: ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık']
                }
            },
            onReady: function (selectedDates, dateStr, instance) {
                instance.altInput.setAttribute("placeholder", "Bir Tarih Seçiniz");
            }
        });

        flatpickr('input[name="EndDate"]', {
            altInput: true,
            altFormat: "d.m.Y",
            dateFormat: "Y-m-d",
            minDate: "today",
            allowInput: true,
            locale: {
                firstDayOfWeek: 1,
                weekdays: {
                    shorthand: ['Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt', 'Paz'],
                    longhand: ['Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi', 'Pazar']
                },
                months: {
                    shorthand: ['Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara'],
                    longhand: ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık']
                }
            },
            onReady: function (selectedDates, dateStr, instance) {
                instance.altInput.setAttribute("placeholder", "Bir Tarih Seçiniz");
            }
        });
    });

</script>
