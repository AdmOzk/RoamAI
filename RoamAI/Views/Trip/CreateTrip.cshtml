@using RoamAI.Models.Entities
@model Trip

<div class="hero-section text-white text-center d-flex align-items-center justify-content-center" style="min-height: 110vh; background-image: url('/images/travel6.png'); background-size: cover; background-position: center;">
    <div class="overlay"></div>
    <div class="hero-content">

        <div class="card mx-auto p-4" style="max-width: 700px; background-color: rgba(255, 255, 255, 0.7); border-radius: 25px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
            <h2 class="mb-4">Travel Planı Oluştur</h2>
            <form id="travelForm" method="post" asp-action="GetRecommendations" asp-controller="Trip">
                <div class="form-group row mb-3">
                    <label class="col-sm-3 col-form-label">Ülke:</label>
                    <div class="col-sm-9">
                        <select id="country" name="Country" asp-for="Country" class="form-control choices" required>
                            <option value="">Select Country</option>
                        </select>
                    </div>
                </div>

                <div class="form-group row mb-3">
                    <label class="col-sm-3 col-form-label">Şehir:</label>
                    <div class="col-sm-9">
                        <select id="city" name="City" asp-for="City" class="form-control" required>
                            <option value="">Select City</option>
                        </select>
                    </div>
                </div>

                <div class="form-group mb-3" style="text-align: center;">
                    <div class="date-container" style="display: inline-block; margin-right: 60px;">
                        <label class="col-form-label">Gidiş Tarihi:</label>
                        <input type="date" name="StartDate" asp-for="StartDate" class="form-control" required style="width: 150px; display: inline-block;" />
                    </div>
                    <div class="date-container" style="display: inline-block;">
                        <label class="col-form-label">Dönüş Tarihi:</label>
                        <input type="date" name="EndDate" asp-for="EndDate" class="form-control" required style="width: 150px; display: inline-block;" />
                    </div>
                </div>


                <fieldset class="form-group row mb-4 p-3 border rounded"> 
                    <legend class="col-form-label">Gezi Türü Seçiniz</legend>
                    <div class="form-group row mb-3">
                        <label class="col-sm-4 col-form-label">Kültürel Gezi:</label>
                        <div class="col-sm-6">
                            <input type="range" name="CulturalPercentage" asp-for="CulturalPercentage" required class="form-range slider" min="0" max="100" step="10" value="40" id="culturalRange">
                        </div>
                        <div class="col-sm-2">
                            <span id="culturalValue">40</span>%
                        </div>
                    </div>

                    <div class="form-group row mb-3">
                        <label class="col-sm-4 col-form-label">Modern Gezi:</label>
                        <div class="col-sm-6">
                            <input type="range" name="EntertainmantPercentage" asp-for="EntertainmantPercentage" required class="form-range slider" min="0" max="100" step="10" value="30" id="modernRange">
                        </div>
                        <div class="col-sm-2">
                            <span id="modernValue">30</span>%
                        </div>
                    </div>

                    <div class="form-group row mb-3">
                        <label class="col-sm-4 col-form-label">Yemek Üzerine Gezi:</label>
                        <div class="col-sm-6">
                            <input type="range" name="FoodPercentage" asp-for="FoodPercentage" required class="form-range slider" min="0" max="100" step="10" value="30" id="foodRange">
                        </div>
                        <div class="col-sm-2">
                            <span id="foodValue">30</span>%
                        </div>
                    </div>
                </fieldset>


                <button type="submit" id="submitBtn" class="btn btn-outline-primary btn-lg btn-block" style="border-width: 3px; border-color:royalblue">Plan Oluştur</button>
            </form>
            <!-- <div id="weatherInfo" class="mt-4"></div> -->
            
        </div>

        @if (Model != null && Model.Locations != null && Model.Locations.Any())
        {
            <div class="card mx-auto p-4 mt-4" style="max-width: 700px; background-color: rgba(255, 255, 255, 0.7); border-radius: 10px;">
                <h3>Gezilecek Yerler</h3>
                <ul>
                    @foreach (var recommendation in Model.Locations)
                    {
                        <li>@recommendation.LocationName</li>
                    }
                </ul>

        <h3>@Model.City hakkında Bilgiler</h3>
        <p>@Model.Description</p> <!-- Şehir hakkında bilgiyi burada gösteriyoruz. -->


                <h3>Harita</h3>
                <div id="map" style="height: 500px; width: 100%;"></div>
                <button id="createMultiStopRoute" style="margin-top: 20px;">Seçili Duraklarla Rota Oluştur</button>
                <button id="resetLocations" style="margin-top: 20px; margin-left: 10px;">Seçimleri Sıfırla</button>
            </div>
        }
    </div>
</div>


<!-- Choices.js CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" />

<!-- jQuery CDN -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Choices.js JS -->
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>





<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Choices.js JS -->
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>

<!-- Google Maps API Key ile Script -->

<!-- Buraya key yapistir. -->


<script>
    $(document).ready(function () {
        // ViewBag'den JSON stringini alıp parse ediyoruz
        var locations = JSON.parse('@Html.Raw(ViewBag.LocationCoordinates)'); // JSON formatındaki stringi parse ediyoruz
        var selectedLocations = []; // Seçilen konumları saklayacağımız dizi

        if (locations && Object.keys(locations).length > 0) {
            // İlk lokasyonu alıyoruz
            var firstLocationKey = Object.keys(locations)[0];
            var firstLocationCoords = locations[firstLocationKey].split(',');
            var firstLat = parseFloat(firstLocationCoords[0]);
            var firstLng = parseFloat(firstLocationCoords[1]);

            // Haritayı başlat
            var map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: firstLat, lng: firstLng },
                zoom: 12
            });

            // Her bir konum için marker ekliyoruz
            Object.keys(locations).forEach(function (key) {
                var coords = locations[key].split(',');
                var lat = parseFloat(coords[0]);
                var lng = parseFloat(coords[1]);

                // Marker oluştur
                var marker = new google.maps.Marker({
                    position: { lat: lat, lng: lng },
                    map: map,
                    title: key
                });

                // Bilgi penceresi içeriğini ayarlıyoruz
                var infoContent = `<b>${key}</b><br>
                            <button onclick="addLocation(${lat}, ${lng}, '${key}')">Bu konumu rota duraklarına ekle</button><br>
                            <a href="https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}" target="_blank">Tek Rota Oluştur</a>`;

                var infoWindow = new google.maps.InfoWindow({
                    content: infoContent
                });

                // Marker'a tıklandığında infoWindow açılıyor
                marker.addListener("click", function () {
                    infoWindow.open(map, marker);
                });
            });
        }

        // Konumları dizimize ekleyen fonksiyon
        window.addLocation = function (lat, lng, key) {
            selectedLocations.push({ lat: lat, lng: lng, name: key });
            Swal.fire({
                icon: 'success',
                title: 'Durak Eklendi',
                text: `${key} rota duraklarına eklendi!`,
                timer: 1500,
                showConfirmButton: false
            });
        };

        // Seçili duraklarla çoklu duraklı rota oluşturma
        $('#createMultiStopRoute').on('click', function () {
            if (selectedLocations.length === 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Uyarı',
                    text: 'Rota oluşturmak için en az bir konum seçin!',
                });
                return;
            }

            // Google Maps rota URL'sini hazırlıyoruz
            var routeUrl = "https://www.google.com/maps/dir/?api=1";
            routeUrl += `&origin=${selectedLocations[0].lat},${selectedLocations[0].lng}`; // İlk seçilen konum başlangıç noktası
            routeUrl += `&destination=${selectedLocations[selectedLocations.length - 1].lat},${selectedLocations[selectedLocations.length - 1].lng}`; // Son seçilen konum varış noktası

            // Ara durakları ekliyoruz
            if (selectedLocations.length > 2) {
                var waypoints = selectedLocations.slice(1, -1).map(loc => `${loc.lat},${loc.lng}`).join('|');
                routeUrl += `&waypoints=${waypoints}`;
            }

            // Yeni sekmede rota oluşturmak için Google Maps'i açıyoruz
            window.open(routeUrl, '_blank');

            // Seçili durakları sıfırlıyoruz
            selectedLocations = [];
            Swal.fire({
                icon: 'info',
                title: 'Duraklar Sıfırlandı',
                text: 'Seçili duraklar sıfırlandı. Yeni durakları seçebilirsiniz.',
                timer: 1500,
                showConfirmButton: false
            });
        });

        // Seçimleri sıfırlama butonu
        $('#resetLocations').on('click', function () {
            selectedLocations = [];
            Swal.fire({
                icon: 'info',
                title: 'Seçimler Sıfırlandı',
                text: 'Tüm seçimler sıfırlandı.',
                timer: 1500,
                showConfirmButton: false
            });
        });
    });
</script>


<!-- Custom Script -->
<script>
    $(document).ready(function () {
        // Choices.js ülke select kutusuna uygula
        const countrySelect = new Choices('#country', {
            searchEnabled: true,
            placeholderValue: 'Ülke Seçiniz',
            searchPlaceholderValue: 'Aramak için yazın...'
        });

        // Şehir seçim dropdown'ına Choices.js uygulayalım
        let citySelect = new Choices('#city', {
            searchEnabled: true,
            placeholderValue: 'Şehir Seçiniz',
            searchPlaceholderValue: 'Aramak için yazın...'
        });

        var citiesData = [];
        $.getJSON('/data/countries.json', function (data) {
            // Ülkeler için seçenekler ekle
            countrySelect.setChoices(data.map(country => ({
                value: country.countryId,
                label: country.name
            })), 'value', 'label', true);
        }).fail(function () {
            console.error('Failed to load countries.json');
        });

        $.getJSON('/data/cities.json', function (data) {
            citiesData = data; // Şehir verilerini depola
        }).fail(function () {
            console.error('Failed to load cities.json');
        });

        $('#country').change(function () {
            var selectedCountryId = $(this).val();

            citySelect.destroy(); // Eski Choices.js instance'ını yok et

            $('#city').empty(); // Şehir dropdown'ını temizle
            $('#city').append($('<option>', { value: '', text: 'Şehir Seçiniz' })); // Varsayılan seçenek ekle

            var filteredCities = citiesData.filter(function (city) {
                return city.countryId == selectedCountryId;
            });

            // Şehirleri select kutusuna ekle
            $.each(filteredCities, function (index, city) {
                $('#city').append($('<option>', {
                    value: city.name, // şehir adını doğrudan API isteğinde kullanmak için
                    text: city.name
                }));
            });

            // Yeniden Choices.js instance'ını oluştur
            citySelect = new Choices('#city', { searchEnabled: true });
        });

        @* // İki tarih arasındaki gün farkını hesaplayan fonksiyon
        function getDayDifference(startDate, endDate) {
            const start = new Date(startDate);
            const end = new Date(endDate);
            const timeDiff = end.getTime() - start.getTime();
            const dayDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
            return dayDiff;
        }

        // WeatherAPI'den tahmini hava durumu al ve tablo şeklinde göster
        function getForecastWeather(cityName, days) {
            const apiKey = '135a7c250dd541e7b4e40644242110';
            const url = `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${cityName}&days=${days}`;

            $.getJSON(url, function (data) {
                let forecastHtml = `<h4>${cityName} için ${days} günlük hava durumu tahmini</h4>`;
                forecastHtml += `<table class="table table-bordered text-white">`;
                forecastHtml += `<thead><tr><th>Tarih</th><th>Sıcaklık (°C)</th><th>Durum</th></tr></thead><tbody>`;

                data.forecast.forecastday.forEach(function (day) {
                    const date = day.date;
                    const temp = day.day.avgtemp_c;
                    const condition = day.day.condition.text;
                    const icon = day.day.condition.icon;

                    forecastHtml += `
                        <tr>
                            <td>${date}</td>
                            <td>${temp}°C</td>
                            <td>${condition} <img src="${icon}" alt="icon"></td>
                        </tr>
                    `;
                });

                forecastHtml += `</tbody></table>`;

                // Hava durumu bilgisini tablo olarak ekrana yazdır
                $('#weatherInfo').html(forecastHtml);
            }).fail(function () {
                $('#weatherInfo').html('<p>Hava durumu bilgisi alınamadı.</p>'); 
            });
        }

        // Form gönderildiğinde hava durumu bilgisini al
        $('#travelForm').submit(function (e) {
            e.preventDefault(); // Formun normal gönderimini engelle

            const cityName = $('#city').find('option:selected').val();
            const startDate = $('input[name="StartDate"]').val();
            const endDate = $('input[name="EndDate"]').val();
            const days = getDayDifference(startDate, endDate);

            if (cityName && days > 0) {
                getForecastWeather(cityName, days); // Tahmini hava durumu verisini tablo olarak al
            }

            // Formu sunucuya göndermeye devam et
            this.submit();
        });*@

        // Slider değerlerini güncelleme fonksiyonu
        function updateSliderValue(slider, displayElementId) {
            document.getElementById(displayElementId).innerText = slider.value;
        }

        // Slider'ları izleme ve toplam değerin 100'ü geçmesini engelleme fonksiyonu
        function handleSliderInput(slider, displayElementId) {
            slider.on('input', function () {
                var cultural = parseInt($('#culturalRange').val(), 10) || 0;
                var modern = parseInt($('#modernRange').val(), 10) || 0;
                var food = parseInt($('#foodRange').val(), 10) || 0;
                var total = cultural + modern + food;

                if (total <= 100) {
                    updateSliderValue(slider[0], displayElementId);
                } else {
                    slider.val(slider.data('prevValue'));
                }
            });

            slider.on('change', function () {
                slider.data('prevValue', slider.val());
            });
        }

        handleSliderInput($('#culturalRange'), 'culturalValue');
        handleSliderInput($('#modernRange'), 'modernValue');
        handleSliderInput($('#foodRange'), 'foodValue');

        // Sayfa yüklendiğinde varsayılan değerleri kaydet
        $('#culturalRange').data('prevValue', $('#culturalRange').val());
        $('#modernRange').data('prevValue', $('#modernRange').val());
        $('#foodRange').data('prevValue', $('#foodRange').val());
    });

</script>

<style>
    .hero-section {
        position: relative;
        width: 100%;
        min-height: 100vh;
        background-image: url('/images/travel-background.png');
        background-size: cover;
        background-position: center;
        padding-top: 75px;
    }

    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.3);
        z-index: 0;
    }

    .hero-content {
        position: relative;
        z-index: 1;
        width: 100%;
        text-align: center;
    }

    .card {
        background-color: rgba(255, 255, 255, 0.7);
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        color: #333;
    }

    .form-control {
        color: #333;
    }

    label {
        color: #333;
    }

    .slider {
        -webkit-appearance: none;
        appearance: none;
        width: 100%;
        height: 8px;
        background: #007bff;
        outline: none;
        opacity: 0.8;
        transition: opacity 0.2s;
        border-radius: 5px;
    }

    .slider:hover {
        opacity: 1;
    }

    .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 20px;
        height: 20px;
        background: #fff;
        border: 2px solid #007bff;
        border-radius: 50%;
        cursor: pointer;
    }

    .slider::-moz-range-thumb {
        width: 20px;
        height: 20px;
        background: #fff;
        border: 2px solid #007bff;
        border-radius: 50%;
        cursor: pointer;
    }

    #weatherInfo table {
        margin: 0 auto;
        background-color: rgba(0, 0, 0, 0.7);
    }

    #weatherInfo th, #weatherInfo td {
        color: white;
        text-align: center;
    }
    .form-group .form-control {
        width: 100%;
    }

    fieldset {
        background-color: rgba(255, 255, 255, 0.8);
        border: 1px solid #007bff;
    }

    .slider-container {
        padding: 10px;
    }

    legend {
        font-size: 1.2rem;
        font-weight: bold;
    }


</style>
